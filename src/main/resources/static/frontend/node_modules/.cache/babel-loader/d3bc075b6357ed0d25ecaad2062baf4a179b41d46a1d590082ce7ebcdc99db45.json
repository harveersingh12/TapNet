{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harve\\\\IdeaProjects\\\\TapNet\\\\src\\\\main\\\\resources\\\\static\\\\frontend\\\\src\\\\NFCScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFCScanner = () => {\n  _s();\n  const [nfcData, setNfcData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if ('NDEFReader' in window) {\n      const nfc = new window.NDEFReader();\n      const startScan = async () => {\n        try {\n          await nfc.scan();\n          console.log('NFC scan started');\n          nfc.onreading = event => {\n            const decoder = new TextDecoder();\n            const data = decoder.decode(event.message.records[0].data);\n            setNfcData(data);\n            console.log('NFC data:', data);\n          };\n          nfc.onreadingerror = error => {\n            setError('Error reading NFC tag. Please try again.');\n            console.error('NFC read error:', error);\n          };\n        } catch (error) {\n          setError('NFC scanning failed. Ensure your device supports NFC and the page is served over HTTPS or localhost.');\n          console.error('NFC scan error:', error);\n        }\n      };\n      startScan();\n    } else {\n      setError('Web NFC is not supported in this browser.');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NFC Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan an NFC tag to see its data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), nfcData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Scanned Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: nfcData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(NFCScanner, \"gNeDe04H1o7q5kOPhLd24rk4Ias=\");\n_c = NFCScanner;\nexport default NFCScanner;\nvar _c;\n$RefreshReg$(_c, \"NFCScanner\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NFCScanner","_s","nfcData","setNfcData","error","setError","window","nfc","NDEFReader","startScan","scan","console","log","onreading","event","decoder","TextDecoder","data","decode","message","records","onreadingerror","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/harve/IdeaProjects/TapNet/src/main/resources/static/frontend/src/NFCScanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst NFCScanner = () => {\r\n    const [nfcData, setNfcData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if ('NDEFReader' in window) {\r\n            const nfc = new window.NDEFReader();\r\n\r\n            const startScan = async () => {\r\n                try {\r\n                    await nfc.scan();\r\n                    console.log('NFC scan started');\r\n\r\n                    nfc.onreading = (event) => {\r\n                        const decoder = new TextDecoder();\r\n                        const data = decoder.decode(event.message.records[0].data);\r\n                        setNfcData(data);\r\n                        console.log('NFC data:', data);\r\n                    };\r\n\r\n                    nfc.onreadingerror = (error) => {\r\n                        setError('Error reading NFC tag. Please try again.');\r\n                        console.error('NFC read error:', error);\r\n                    };\r\n                } catch (error) {\r\n                    setError('NFC scanning failed. Ensure your device supports NFC and the page is served over HTTPS or localhost.');\r\n                    console.error('NFC scan error:', error);\r\n                }\r\n            };\r\n\r\n            startScan();\r\n        } else {\r\n            setError('Web NFC is not supported in this browser.');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>NFC Scanner</h1>\r\n            {error ? (\r\n                <p style={{ color: 'red' }}>{error}</p>\r\n            ) : (\r\n                <div>\r\n                    <p>Scan an NFC tag to see its data.</p>\r\n                    {nfcData && (\r\n                        <div>\r\n                            <h2>Scanned Data:</h2>\r\n                            <p>{nfcData}</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NFCScanner;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}